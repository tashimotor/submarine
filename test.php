<?php
//Функция создаёт заказ в БД интернет магазина.
//Задача: указать все ошибки и недостатки, сделать рефакторинг.
use Entities\OrderRequestEntity;
use Models\Balance;
use Models\Order;
use Modules\Database\MysqlLink;

/**
 * Самая серьезная проблема - может быть нарушена консистентность данных. Баланс может уменьшиться,
 * а заказ не создаться. Для того чтобы это не происходило, логику надо завернуть в транзакцию.
 * Добавить обработку исключений, и при получении исключения откатывать транзакцию.
 *
 * Вторая проблема - запросы в цикле. Это снижает производительность.
 * Тут можно предложить не запрашивать и не списывать каждый раз баланс. Запросить один раз и списывать в памяти.
 * Я не стал этого делать, потому что не знаю контекста работы функции.
 * Непонятно должен ли заказ частично создаваться, или на балансе должны быть полная сумма всех товаров.
 *
 * Третья проблема - подстановка в запросы данных сразу из глобальных переменных, тут может получиться sql-инъекция.
 * Я добавил обработку данных(экранирование и приведение к типу).
 *
 * Четвертая проблема - не проверяются данные полученные от клиента. Возможны кейсы когда в массиве prices, нет цены для
 * какого-то товара. Я добавил примитивную проверку, но это необходимо делать отдельно и в другом места. Это не зона
 * ответственности этой функции.
 *
 * Остальное по мелочи будет понятно из кода.
 *
 * Переписал всс на ООП и DTO, убрал запросы в цикле, пусть будет невозможно оформить заказ, если баланс меньше суммы заказа.
 *
 * Теперь все легко покрывается unit тестами.
 *
 * @return void
 *
 */
function MK_ord(): void
{
    $orderRequest = new OrderRequestEntity($_GET['user'], $_GET['item'], $_GET['price']);

    $database = new MysqlLink();

    $balance    = new Balance($database, $orderRequest->getUserId());
    $balanceSum = $balance->get();
    if ($balanceSum === null) {
        die('Ошибка получения баланса пользователя');
    }

    $order = new Order($database, $orderRequest->getUserId());

    foreach ($orderRequest->getItems() as $item) {
        $order->addItem($item->getName(), $item->getPrice());

        if ($order->getSum() < $balanceSum) {
            die('Недостаточно средств');
        }
    }

    mysqli_begin_transaction($database->getLink());

    try {
        $balance->update($balanceSum - $order->getSum());
        $orderId = $order->save();

        mysqli_commit($database->getLink());

        echo "Номер вашего заказа: ".$orderId;
    } catch (Throwable $e) {
        mysqli_rollback($database->getLink());

        die ($e->getMessage());
    }
}
